// Libraries ----------------------------------
#include <SPI.h>
#include <RH_RF95.h>

// Variables ----------------------------------
//LoRa - Model: Adafruit Feather M0 LoRa
#define RFM95_CS 10
#define RFM95_RST 9
#define RFM95_INT 2
#define RF95_FREQ 915.0
RH_RF95 rf95(RFM95_CS, RFM95_INT);

#define buttonPin 3   // Push button pin
#define ledPin 4      // LED pin

//int padaRelease = 0; 
bool dropped = false; 
bool dropConfirm = false;
int buttonState; 
int drop_num = 0; 

void send_drop(){
  drop_num += 1;
  char sig[5] = "drop";
  sig[4] = 0;
  dropped = rf95.send((uint8_t *)sig, 5);
  rf95.waitPacketSent();
  delay(100);
  digitalWrite(ledPin, HIGH);
  Serial.println("drop");
}

void setup() {

  // LED and Button Setup
  pinMode(buttonPin, INPUT);
  pinMode(ledPin, OUTPUT); 
  digitalWrite(ledPin, LOW);

  // Radio Setup
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);

  Serial.begin(9600);
  delay(100);
  //Serial.println("LoRa Initializing...");
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);
  while (!rf95.init()){
    Serial.println("LoRa radio init failed");
    while (1);
  }
  if (!rf95.setFrequency(RF95_FREQ)){
    Serial.println("Set frequency failed");
    while (1);
  }
  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM
  if (!rf95.setFrequency(RF95_FREQ)){
    Serial.println("Set frequency failed");
    while (1);
  }
  rf95.setTxPower(23, false);
  
}

uint32_t timer;
void loop() {
  
  // Recieving package from DAS
  if (rf95.available()){ 
    // Should be a message for us now
    uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(buf) - 1;
    if (rf95.recv(buf, &len)&&len>0){
      buf[len] = 0;
      char* package = (char*) &buf;
      Serial.println(package);
      //dropConfirm = package[strlen(package)-1]=='0'?true:false;
      /*************************
      if(!dropped){
        buttonState = digitalRead(buttonPin);
        if(buttonState == HIGH){ 
        //send_drop();

        drop_num += 1;
        char sig[5] = "drop";
        sig[4] = 0;
        package[strlen(package) - 1] = 0.0;
        rf95.send(package, sizeof(package));
        //dropped = rf95.send((uint8_t *)sig, 5);
        rf95.waitPacketSent();
        delay(100);
        digitalWrite(ledPin, HIGH);
        Serial.print("drop "); Serial.println(package);
      
        //Serial.println("Somthing wrong");
        }
      }
      
      if(dropped && !dropConfirm){ //In Case Drop is not heard on first go through
        if(millis()-timer>1000){
          if(drop_num < 4){
          //send_drop();

          drop_num += 1;
          char sig[5] = "drop";
          sig[4] = 0;
          package[strlen(package) - 1] = 0.0;
          rf95.send(package, sizeof(package));
          //dropped = rf95.send((uint8_t *)sig, 5);
          rf95.waitPacketSent();
          delay(100);
          digitalWrite(ledPin, HIGH);
          Serial.print("drop "); Serial.println(package);
        
          timer = millis();
          }
        }
      }
      ****************************/
    }
  }
  
  if(!dropped){
    buttonState = digitalRead(buttonPin);
    if(buttonState == HIGH){ 
      send_drop();

      //drop_num += 1;
      //char sig[5] = "drop";
      //sig[4] = 0;
      //package[10] = 0.0;
      //rf95.send(package, sizeof(package))
      //dropped = rf95.send((uint8_t *)sig, 5);
      //rf95.waitPacketSent();
      //delay(100);
      //digitalWrite(ledPin, HIGH);
      //Serial.println("drop");
      
      //Serial.println("Somthing wrong");
    }
  }
  
  if(dropped && !dropConfirm){ //In Case Drop is not heard on first go through
    if(millis()-timer>1000){
      if(drop_num < 4){
        send_drop();

        //drop_num += 1;
        //char sig[5] = "drop";
        //sig[4] = 0;
        //package[10] = 0.0;
        //rf95.send(package, sizeof(package))
        //dropped = rf95.send((uint8_t *)sig, 5);
        //rf95.waitPacketSent();
        //delay(100);
        //digitalWrite(ledPin, HIGH);
        //Serial.println("drop");
        
        timer = millis();
      }
    }
  }
  
}
